<?php

namespace Raffles\Modules\Poga\Http\Controllers\Base97;

use Raffles\Http\Controllers\Controller;
use Raffles\Modules\Poga\Notifications\BoletaPagada;
use Raffles\Modules\Poga\Repositories\PagareRepository;
use Raffles\Modules\Poga\UseCases\{ ActualizarEstadoPagare, GenerarBoletaPago };

use Carbon\Carbon;
use Illuminate\Http\Request;
use RafflesArgentina\ResourceController\Traits\FormatsValidJsonResponses;

class NotificacionPagoController extends Controller
{
    use FormatsValidJsonResponses;

    /**
     * The PagareRepository object.
     *
     * @var PagareRepository 
     */
    protected $repository;

    /**
     * Create a new NotificacionPagoController instance.
     *
     * @param  PagareRepository $repository
     *
     * @return void
     */
    public function __construct(PagareRepository $repository)
    {
        $this->repository = $repository;
    }

    /**
     * Handle the incoming request.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return \Illuminate\Http\Response
     */
    public function __invoke(Request $request)
    {
        $b64UrlModel = $request->doc_model;
        $jsonModel =  base64_decode(str_replace(['-','_'], ['+','/'], $b64UrlModel));
	$docModel = json_decode($jsonModel, true);

	\Log::info($docModel);

	try {
	    $pagare = $this->repository->findOrFail($docModel['docId']);

	    $payStatus = $docModel['payStatus']['status'];

	    if ($payStatus === 'success') {
	        $estado = 'PAGADO';

                $amountCurrency = $docModel['amount']['currency'];
		$amountValue = $docModel['amount']['value'];
		$label = $docModel['label'];
		$targetLabel = $docModel['target']['label'];
                $targetNumber = $docModel['target']['number'];
		$targetType = $docModel['target']['type'];

                $adminUser = \Raffles\Modules\Poga\Models\User::where('email', 'josue.aveiro@mavaite.com')->first();

		$pagareComision = $this->repository->create([
		    'descripcion' => 'Comisión POGA (%5.5)',
		    'enum_clasificacion_pagare' => 'COMISION',
		    'enum_estado' => 'PENDIENTE',
		    'fecha_pagare' => Carbon::now(),
		    'fecha_vencimiento' => Carbon::now()->addYear(),
		    'id_inmueble' => $pagare->id_inmueble,
		    'id_moneda' => '1',
		    'id_persona_acreedora' => $adminUser->id_persona,
		    'id_persona_deudora' => $pagare->id_persona_acreedora,
		    'id_tabla' => $docModel['docId'],
		    'monto' => intval($amountValue) * 5.5 / 100
		])[1];

	    } elseif ($payStatus === 'pending')  {
		if ($pagare->enum_estado !== 'PENDIENTE') {    
		    $this->repository->update($pagare, ['revertido' => '1']);
                }

	        $estado = 'PENDIENTE';
	    } else {
                $estado = 'PENDIENTE';
	    }

	    $this->dispatchNow(new ActualizarEstadoPagare($pagare, $estado));
	} catch (\Exception $e) {
            return $this->validInternalServerErrorJsonResponse($e, 'Ocurrió un error al intentar actualizar el estado del pagaré de la boleta de pago de Renta.');
	}

	$items = $docModel['description']['items'];
	foreach ($items as $item) {
	    try {
	        $pagare = $this->repository->findOrFail($item['code']);
		$this->dispatchNow(new ActualizarEstadoPagare($pagare, 'PAGADO'));
	    } catch (\Exception $e) {
                return $this->validInternalServerErrorJsonResponse($e, 'Ocurrió un error al intentar actualizar el estado de pagaré de uno de los items de la boleta de pago.');
	    }
	}

        return response()->json('Success');
    }
}
